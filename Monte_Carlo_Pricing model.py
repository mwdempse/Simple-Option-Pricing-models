from geometric_brownian_motion import *
from Black_Scholes_Pricing import *
from Up_and_Out_Barrier_Option import *

import matplotlib.pyplot as plt
import numpy as np
import math


# Model Parameters
paths = 100 # number of sims
initial_price = 100 # stock starting point
drift = .08 # expected returns
volatility = 0.1 # standard deviation of return
dt = 1/365 #dayly
T = 1 # 1 year
price_paths = []

# Generate possible GBM futures
for i in range(0, paths):
    price_paths.append(GeometricBrownianMotion(initial_price, drift, volatility, dt, T).prices)


# Plot the set of generated sample paths
for price_path in price_paths:
    plt.plot(price_path)
plt.show()


# European Call with Black-Schikes Model
ecbs = EuropeanCall(100, .3, 100, 1, .01)

# Barrier 
barrier_payoffs = []
risk_free_rate = .01
for price_path in price_paths:
    # Generate new payoff structure for each path
    bc = UpandOutBarrierOption(100, 100.5)
    for price in price_path:
        bc.check_barrier(price)
    barrier_payoffs.append(bc.get_payoff(price_path[-1])/(1 + risk_free_rate))  # We get the last stock price in the series generated by GBM to determin the payoff and discount it by one year



# Option Prices
print('Expected European Option Price with Black-Schikes Model: ' + str(round(ecbs.price,2)))
print('Expected Up and Out Barrier Option Price: ' + str(round(np.average(barrier_payoffs)*100,2)))  # Options are in blocks of 100
